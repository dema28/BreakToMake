package com.breaktomake.tests;

import com.breaktomake.config.Environment;
import com.breaktomake.listeners.AllureListener;
import com.breaktomake.utils.DriverFactory;
import com.breaktomake.utils.LoggerUtil;
import com.breaktomake.utils.ScreenshotUtil;
import org.openqa.selenium.WebDriver;
import org.testng.ITestResult;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Listeners;

@Listeners(AllureListener.class)
public class BaseTest {
    protected WebDriver driver;

    @BeforeMethod
    public void setUp() {
        LoggerUtil.info("üîß –ó–∞–ø—É—Å–∫ WebDriver –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–æ–º");
        DriverFactory.initDriver();
        driver = DriverFactory.getDriver();
        LoggerUtil.info("‚úÖ WebDriver –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");

        driver.get(Environment.BASE_URL);
        LoggerUtil.info("üåê –û—Ç–∫—Ä—ã—Ç–∞ —Å—Ç–∞—Ä—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: " + Environment.BASE_URL);
    }

    @AfterMethod
    public void tearDown(ITestResult result) {
        boolean testFailed = result.getStatus() == ITestResult.FAILURE;

        if (testFailed && Environment.isScreenshotOnFail()) {
            LoggerUtil.info("\uD83D\uDCF8 –¢–µ—Å—Ç —É–ø–∞–ª, –¥–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç");
            ScreenshotUtil.captureScreenshot(driver, result.getName());
        }

        LoggerUtil.info("\uD83E\uDEBF –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞: " + result.getName() + ". –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: " + !testFailed);
        DriverFactory.quitDriver(testFailed);
        LoggerUtil.logEnd("\uD83D\uDEB0 [tearDown] –î—Ä–∞–π–≤–µ—Ä –∑–∞–∫—Ä—ã—Ç");
    }
}
