package com.breaktomake.pages;

import com.breaktomake.BasePage;
import com.breaktomake.enums.MenuItem;
import com.breaktomake.utils.LoggerTag;
import com.breaktomake.utils.LoggerUtil;
import com.breaktomake.utils.ScrollUtil;
import io.qameta.allure.Allure;
import io.qameta.allure.Step;
import org.openqa.selenium.*;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import com.breaktomake.config.Environment;
import org.openqa.selenium.interactions.Actions;

import java.time.Duration;
import java.util.List;
import java.util.Set;

import static org.testng.Assert.assertTrue;

public class MainPage extends BasePage {

    private final By houseCards = By.xpath("//li[starts-with(@class, 'framer-')]");
    private final By facebookIcon = By.cssSelector("a[href*='facebook.com']");
    private final By instagramIcon = By.cssSelector("a[href*='instagram.com']");

    public MainPage(WebDriver driver) {
        super(driver);
    }

    @Step("–û—Ç–∫—Ä—ã—Ç–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {url}")
    public void open(String url) {
        driver.get(url);
    }

    @Step("–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
    public String getTitle() {
        return driver.getTitle();
    }

    @Step("–ü–µ—Ä–µ—Ö–æ–¥ –≤–æ –≤–∫–ª–∞–¥–∫—É 'Katalog' –∏ –æ–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
    public void goToCatalogPage() {
        By katalogLocator = MenuItem.KATALOG.getLocator();
        By katalogPageHeader = By.xpath("//h2[contains(text(),'Katalog')]");

        waitForElementToBeVisible(katalogLocator);
        clickOnMenu(MenuItem.KATALOG);
        waitForElementToBeVisible(katalogPageHeader);
    }

    @Step("–ö–ª–∏–∫ –ø–æ –∫–∞—Ä—Ç–æ—á–∫–µ –¥–æ–º–∞ 'Modul 4'")
    public void clickOnHouseCard() {
        By modul4Card = By.xpath("//a[contains(@href, 'zdeny-modul-4')]");
        click(modul4Card);
    }

    @Step("–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–æ–º–æ–≤")
    public int getHouseCardCount() {
        return Allure.step("–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–æ–º–æ–≤ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π", () -> {
            WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(Environment.getTimeout()));
            List<WebElement> cards = wait.until(ExpectedConditions.visibilityOfAllElementsLocatedBy(houseCards));
            if (!cards.isEmpty()) {
                ScrollUtil.scrollToElement(driver, cards.get(0));
            }
            Allure.step("–ù–∞–π–¥–µ–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫: " + cards.size());
            return cards.size();
        });
    }

    @Step("–ö–ª–∏–∫ –ø–æ –ø—É–Ω–∫—Ç—É –º–µ–Ω—é: {menuItem.name}")
    public void clickOnMenu(MenuItem menuItem) {
        WebElement element = new WebDriverWait(driver, Duration.ofSeconds(Environment.getTimeout()))
                .until(ExpectedConditions.elementToBeClickable(menuItem.getLocator()));
        element.click();

        try {
            Thread.sleep(500);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }
    }

    @Step("–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞: {expectedHeader}")
    public boolean isHeaderVisible(String expectedHeader) {
        By headerLocator = By.xpath("//*[contains(@class, 'framer-text') and contains(normalize-space(text()), '" + expectedHeader + "')]");
        int attempts = 0;
        while (attempts < 3) {
            try {
                WebElement header = new WebDriverWait(driver, Duration.ofSeconds(Environment.getTimeout() + 5))
                        .until(ExpectedConditions.visibilityOfElementLocated(headerLocator));
                return header.isDisplayed();
            } catch (Exception e) {
                attempts++;
                try {
                    Thread.sleep(500);
                } catch (InterruptedException ignored) {}
            }
        }
        return false;
    }

    @Step("–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ URL")
    public String getCurrentUrl() {
        return driver.getCurrentUrl();
    }

    @Step("–ö–ª–∏–∫ –ø–æ –∏–∫–æ–Ω–∫–µ Facebook")
    public void clickFacebookIcon() {
        WebElement element = driver.findElement(facebookIcon);
        ScrollUtil.scrollToElement(driver, element);
        LoggerUtil.info(LoggerTag.PAGE, "üñ± –ö–ª–∏–∫ –ø–æ –∏–∫–æ–Ω–∫–µ Facebook");
        element.click();
    }

    @Step("–ü–æ–ª—É—á–µ–Ω–∏–µ URL –∏–∫–æ–Ω–∫–∏ Instagram")
    public String getInstagramUrl() {
        WebElement element = driver.findElement(instagramIcon);
        ScrollUtil.scrollToElement(driver, element);
        String instagramUrl = element.getAttribute("href");
        LoggerUtil.info(LoggerTag.PAGE, "üîó –ü–æ–ª—É—á–µ–Ω URL Instagram: " + instagramUrl);
        return instagramUrl;
    }




    @Step("–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –Ω–æ–≤—É—é –≤–∫–ª–∞–¥–∫—É –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ URL")
    public String switchToNewTabAndGetUrl() {
        String originalWindow = driver.getWindowHandle();

        new WebDriverWait(driver, Duration.ofSeconds(10))
                .until(driver -> driver.getWindowHandles().size() > 1);

        Set<String> windows = driver.getWindowHandles();
        for (String window : windows) {
            if (!window.equals(originalWindow)) {
                driver.switchTo().window(window);
                LoggerUtil.info(LoggerTag.PAGE, "üîÄ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –Ω–æ–≤—É—é –≤–∫–ª–∞–¥–∫—É");
                String newUrl = driver.getCurrentUrl();
                LoggerUtil.info(LoggerTag.PAGE, "üîó –ü–æ–ª—É—á–µ–Ω URL: " + newUrl);
                return newUrl;
            }
        }
        return null;
    }

    @Step("–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π —Ñ–æ—Ä–º—ã")
    public void fillAndSubmitContactForm(String firstName, String lastName, String email, String phone, String message, String topic) {
        scrollToElement(By.tagName("form"));

        // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª–µ–π
        type(By.xpath("//input[@name='K≈ôestn√≠ jm√©no']"), firstName);
        type(By.xpath("//*[@name='P≈ô√≠jmen√≠']"), lastName);
        type(By.xpath("//*[@name='E-mailov√° adresa']"), email);
        type(By.xpath("//*[@name='Telefon']"), phone);
        type(By.xpath("//*[@name='Zpr√°va']"), message);

        // –í—ã–±–æ—Ä –∏–∑ –≤—ã–ø–∞–¥–∞—à–∫–∏
        selectTopicFromDropdown(topic);

        // üîÑ –ñ–¥—ë–º –ø–æ—è–≤–ª–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∫–ª–∏–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
        clickSubmitButton();

        // –ñ–¥—ë–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ—è–≤–∏—Ç—Å—è
        assertTrue(isSuccessMessageDisplayed(), "–°–æ–æ–±—â–µ–Ω–∏–µ 'Dƒõkujeme' –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã.");
    }



    @Step("–í—ã–±–æ—Ä —Ç–µ–º—ã –∏–∑ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞: {topic}")
    public void selectTopicFromDropdown(String topic) {
        By dropdown = By.xpath("//select[@name='P≈ôedmƒõt']");
        click(dropdown);  // –û—Ç–∫—Ä—ã—Ç—å –≤—ã–ø–∞–¥–∞—à–∫—É

        By wrapper = By.xpath("//div[contains(@class, 'framer-form-select-wrapper')]");
        WebElement container = waitForElementToBeVisible(wrapper);
        List<WebElement> options = container.findElements(By.tagName("option"));

        LoggerUtil.info(LoggerTag.PAGE, "üìã –í—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –≤—ã–ø–∞–¥–∞—à–∫–µ:");
        boolean found = false;
        for (WebElement option : options) {
            String text = option.getText().trim();
            LoggerUtil.debug(LoggerTag.PAGE, "üîπ " + text);
            if (text.equals(topic)) {
                option.click(); // –í—ã–±–æ—Ä –Ω—É–∂–Ω–æ–≥–æ
                found = true;
                break;
            }
        }

        if (!found) {
            LoggerUtil.error(LoggerTag.PAGE, "‚ùå –í–∞—Ä–∏–∞–Ω—Ç '" + topic + "' –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö");
            throw new RuntimeException("–ó–Ω–∞—á–µ–Ω–∏–µ '" + topic + "' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –≤—ã–ø–∞–¥–∞—é—â–µ–º —Å–ø–∏—Å–∫–µ.");
        }

        // üßπ –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç—å –≤—ã–ø–∞–¥–∞—à–∫—É –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
        try {
            LoggerUtil.debug(LoggerTag.PAGE, "üß™ –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç—å –≤—ã–ø–∞–¥–∞—à–∫—É —á–µ—Ä–µ–∑ ESC");
            Actions actions = new Actions(driver);
            actions.sendKeys(Keys.ESCAPE).perform();
            Thread.sleep(500); // –ü–æ–¥–æ–∂–¥–∞—Ç—å, —á—Ç–æ–±—ã –≤—Å—ë –∑–∞–∫—Ä—ã–ª–∏—Å—å
        } catch (Exception e) {
            LoggerUtil.warn(LoggerTag.PAGE, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å —á–µ—Ä–µ–∑ ESC: " + e.getMessage());
        }

        LoggerUtil.debug(LoggerTag.PAGE, "üìå –í—ã–ø–∞–¥–∞—à–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞ (–ø–æ ESC)");
    }

    @Step("–ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É 'Odeslat'")
    public void clickSubmitButton() {
        By submitButton = By.xpath("//button[@type='submit' and contains(., 'Odeslat')]");

        // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –∫–Ω–æ–ø–∫–µ
        WebElement button = waitForElementToBeVisible(submitButton);
        ScrollUtil.scrollToElement(driver, button);

        // –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –∫–Ω–æ–ø–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞
        new WebDriverWait(driver, Duration.ofSeconds(10))
                .until(ExpectedConditions.elementToBeClickable(submitButton));

        LoggerUtil.info(LoggerTag.PAGE, "üñ± –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É 'Odeslat'");
        button.click();
    }












    @Step("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—è–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ")
    public boolean isSuccessMessageDisplayed() {
        By successMessage = By.xpath("//p[contains(@class, 'framer-text') and contains(text(), 'Dƒõkujeme')]");
        try {
            return new WebDriverWait(driver, Duration.ofSeconds(10))
                    .until(ExpectedConditions.visibilityOfElementLocated(successMessage)).isDisplayed();
        } catch (TimeoutException e) {
            LoggerUtil.warn(LoggerTag.PAGE, "‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–µ –ø–æ—è–≤–∏–ª–æ—Å—å");
            return false;
        }
    }


    @Step("–ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π —Ñ–æ—Ä–º–µ")
    public void scrollToContactForm() {
        WebElement form = driver.findElement(By.xpath("//*[@id='formul√°≈ô']")); // –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —É—Ç–æ—á–Ω–∏–º –ª–æ–∫–∞—Ç–æ—Ä
        ScrollUtil.scrollToElement(driver, form);
    }







}
