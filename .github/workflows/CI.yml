name: Java UI Tests

on:
  push:
  pull_request:

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      # Шаг 1: Клонирование репозитория
      - name: Checkout repository
        uses: actions/checkout@v4

      # Шаг 2: Установка JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'corretto'
          java-version: '17'
          cache: 'maven'

      # Шаг 3: Установка Google Chrome
      - name: Install Google Chrome
        run: |
          sudo apt-get update
          sudo apt-get install -y wget gnupg unzip
          wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | gpg --dearmor | sudo tee /usr/share/keyrings/google-chrome.gpg > /dev/null
          echo "deb [arch=amd64 signed-by=/usr/share/keyrings/google-chrome.gpg] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable

      # Шаг 4: Установка Xvfb для headless режима
      - name: Start Xvfb
        run: |
          export DISPLAY=:99
          Xvfb :99 -screen 0 1920x1080x24 > /dev/null 2>&1 &
          echo "DISPLAY=:99" >> $GITHUB_ENV

      # Шаг 5: Очистка предыдущих результатов Allure
      - name: Clean previous allure results
        run: |
          rm -rf allure-results allure-report
          rm -rf target/allure-results target/allure-report

      # Шаг 6: Запуск тестов
      - name: Run Java UI tests
        run: mvn clean test -Denv=ci

      # Шаг 7: Просмотр содержимого allure-results (для отладки)
      - name: Debug:list contents of allure-results
        run: ls -R target/allure-results || echo "No results found"

      # Шаг 8: Установка Allure CLI
      - name: Install Allure CLI
        run: |
          wget https://github.com/allure-framework/allure2/releases/download/2.33.0/allure-2.33.0.tgz
          tar -zxvf allure-2.33.0.tgz
          sudo mv allure-2.33.0 /opt/allure
          sudo ln -s /opt/allure/bin/allure /usr/bin/allure
          allure --version

      # Шаг 9: Генерация отчета Allure
      - name: Generate Allure report
        run: |
          allure generate target/allure-results --clean -o target/allure-report

      # Шаг 10: Загрузка отчета Allure как артефакт
      - name: Upload Allure report
        uses: actions/upload-artifact@v4
        with:
          name: allure-report
          path: target/allure-report

      # Шаг 11: Загрузка результатов Allure как артефакт
      - name: Upload Allure results
        uses: actions/upload-artifact@v4
        with:
          name: allure-results
          path: target/allure-results

      # Шаг 12: Логи при падении тестов
      - name: Upload Test Logs if failed
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: test-logs
          path: logs/test_logs

      # Шаг 13: Логи CI при падении
      - name: Upload CI Logs if failed
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: ci-logs
          path: logs/ci_logs

      # Шаг 14: Установка Newman
      - name: Install Newman
        run: npm install -g newman

      # Шаг 15: Run Postman collections (recursive, clean output)
      - name: Run Postman collections
        run: |
          echo "Searching for *_Collection.postman_collection.json files in ./src/postman/collections/..."

          find ./src/postman/collections -type f -name "*_Collection.postman_collection.json" | while read collection; do
            echo "Running: $(basename "$collection")"
            newman run "$collection" || echo "Collection failed or is empty: $(basename "$collection")"
          done
